#
# Copyright (c) 2018 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file contains an OpenShift template that creates all the objects needed
# for a working installation of the application. See the `template.sh` file for
# an example of how to use it.

---

apiVersion: v1
kind: Template
metadata:
  name: unified-hybrid-cloud
  annotations:
    description: "Unified Hybrid Cloud"
parameters:

- name: NAMESPACE
  description: The namespace where the objects will be created.
  value: unified-hybrid-cloud

- name: VERSION
  description: The version number of the project.
  value: latest

- name: DOMAIN
  description: The DNS domain where the routes will be created.
  value: example.com

- name: PASSWORD
  description: Password for the database user.

- name: DEMO_MODE
  description: If set to true, services will run without authentication.
  value: "false"

objects:

# Cluster service
# ---------------

# Deployment
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: clusters-service
    labels:
      app: clusters-service
  spec:
    selector:
      matchLabels:
        app: clusters-service
    replicas: 1
    template:
      metadata:
        labels:
          app: clusters-service
      spec:
        volumes:
          - name: https-clusters-secret
            secret:
              secretName: https-clusters-secret
        containers:
        - name: service
          image: dedicated-portal/clusters-service:${VERSION}
          imagePullPolicy: IfNotPresent
          args:
          - serve
          - --demo-mode=${DEMO_MODE}
          - --db-url=postgres://service:${PASSWORD}@clusters-db-service.${NAMESPACE}/clusters?sslmode=disable
          - --jwk-certs-url=https://developers.redhat.com/auth/realms/rhd/protocol/openid-connect/certs
          - --https-cert-path=/secrets/tls.crt
          - --https-key-path=/secrets/tls.key
          volumeMounts:
          - name: https-clusters-secret
            mountPath: "/secrets"
# Service
- apiVersion: v1
  kind: Service
  metadata:
    name: clusters-service
    labels:
      app: clusters-service
    annotations:
      "service.alpha.openshift.io/serving-cert-secret-name": https-clusters-secret
  spec:
    selector:
      app: clusters-service
    ports:
    - port: 8000
      targetPort: 8000
# Route
- apiVersion: v1
  kind: Route
  metadata:
    name: clusters-service
  spec:
    host: clusters-service.${DOMAIN}
    to:
      kind: Service
      name: clusters-service
    tls:
      termination: passthrough

# Customers service
# -----------------

# Deployment
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: customers-service
    labels:
      app: customers-service
  spec:
    selector:
      matchLabels:
        app: customers-service
    replicas: 1
    template:
      metadata:
        labels:
          app: customers-service
      spec:
        volumes:
        - name: https-customers-secret
          secret:
            secretName: https-customers-secret
        containers:
        - name: service
          image: dedicated-portal/customers-service:${VERSION}
          imagePullPolicy: IfNotPresent
          args:
          - serve
          - --demo-mode=${DEMO_MODE}
          - --db-url=postgres://service:${PASSWORD}@customers-db-service.${NAMESPACE}/customers?sslmode=disable
          - --jwk-certs-url=https://developers.redhat.com/auth/realms/rhd/protocol/openid-connect/certs
          - --https-cert-path=/secrets/tls.crt
          - --https-key-path=/secrets/tls.key
          volumeMounts:
          - name: https-customers-secret
            mountPath: "/secrets"
# Service
- apiVersion: v1
  kind: Service
  metadata:
    name: customers-service
    labels:
      app: customers-service
    annotations:
      "service.alpha.openshift.io/serving-cert-secret-name": https-customers-secret
  spec:
    selector:
      app: customers-service
    ports:
    - port: 8000
      targetPort: 8000
# Route
- apiVersion: v1
  kind: Route
  metadata:
    name: customers-service
  spec:
    host: customers-service.${DOMAIN}
    to:
      kind: Service
      name: customers-service
    tls:
      termination: passthrough

# Customers DB
# ------------

# Deployment
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: customers-db-service
    labels:
      app: customers-db-service
  spec:
    selector:
      matchLabels:
        app: customers-db-service
    replicas: 1
    template:
      metadata:
        labels:
          app: customers-db-service
      spec:
        containers:
        - name: postgresql
          image: centos/postgresql-94-centos7
          imagePullPolicy: IfNotPresent
          env:
          - name: POSTGRESQL_DATABASE
            value: customers
          - name: POSTGRESQL_USER
            value: service
          - name: POSTGRESQL_PASSWORD
            value: ${PASSWORD}
          ports:
          - containerPort: 5432
            protocol: TCP
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: data
        volumes:
        - emptyDir: {}
          name: data
# Service
- apiVersion: v1
  kind: Service
  metadata:
    name: customers-db-service
    labels:
      app: customers-db-service
  spec:
    selector:
      app: customers-db-service
    ports:
    - port: 5432
      targetPort: 5432

# Clusters DB
# ------------

# Deployment
- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: clusters-db-service
    labels:
      app: clusters-db-service
  spec:
    selector:
      matchLabels:
        app: clusters-db-service
    replicas: 1
    template:
      metadata:
        labels:
          app: clusters-db-service
      spec:
        containers:
        - name: postgresql
          image: centos/postgresql-94-centos7
          imagePullPolicy: IfNotPresent
          env:
          - name: POSTGRESQL_DATABASE
            value: clusters
          - name: POSTGRESQL_USER
            value: service
          - name: POSTGRESQL_PASSWORD
            value: ${PASSWORD}
          ports:
          - containerPort: 5432
            protocol: TCP
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: data
        volumes:
        - emptyDir: {}
          name: data
# Service
- apiVersion: v1
  kind: Service
  metadata:
    name: clusters-db-service
    labels:
      app: clusters-db-service
  spec:
    selector:
      app: clusters-db-service
    ports:
    - port: 5432
      targetPort: 5432
